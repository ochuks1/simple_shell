#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

#define BUFFER_SIZE 1024

/**
 * main - Entry point for the simple shell
 *
 * Return: Always 0
 */
int main(void)
{
    char command[BUFFER_SIZE];
    char *args[10]; /* Maximum of 10 arguments */

    while (1)
    {
        printf("$ "); /* Displaying the prompt */

        /* Read user input */
        if (fgets(command, BUFFER_SIZE, stdin) == NULL)
        {
            if (feof(stdin))
            {
                printf("\n"); /* Print a newline for clarity */
                break; /* Exit the loop if end-of-file is reached (Ctrl+D) */
            }
            else
            {
                perror("fgets"); /* Print an error if fgets fails for other reasons */
                break; /* Exit the loop in case of error */
            }
        }

        /* Remove trailing newline character */
        command[strcspn(command, "\n")] = '\0';

        /* Tokenize the command line to separate the command and its arguments */
        char *token = strtok(command, " ");
        int i = 0;
        while (token != NULL)
        {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL; /* Null-terminate the arguments array */

        /* Create child process to execute the command */
        pid_t pid = fork();
        if (pid == -1)
        {
            perror("fork");
            exit(EXIT_FAILURE);
        }
        else if (pid == 0)
        {
            /* Child process */
            execvp(args[0], args);
            /* If execvp returns, it must have failed */
            perror("exec");
            exit(EXIT_FAILURE);
        }
        else
        {
            /* Parent process */
            int status;
            waitpid(pid, &status, 0); /* Wait for child process to finish */
        }
    }

    return (0);
}
