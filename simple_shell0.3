#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

#define BUFFER_SIZE 1024
#define DELIM " \t\r\n\a"

/**
 * get_path_directories - Extracts directories from PATH variable
 * @path: The PATH environment variable
 *
 * Return: An array of strings containing directories
 */
char **get_path_directories(char *path)
{
    char *token, **directories;
    int i = 0;

    directories = malloc(sizeof(char *) * BUFFER_SIZE);
    if (directories == NULL)
    {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    token = strtok(path, ":");
    while (token != NULL)
    {
        directories[i++] = token;
        token = strtok(NULL, ":");
    }
    directories[i] = NULL;

    return directories;
}

/**
 * main - Entry point for the simple shell
 *
 * Return: Always 0
 */
int main(void)
{
    char command[BUFFER_SIZE], **directories;
    char *args[10];
    int i;

    /* Extract directories from PATH */
    char *path = getenv("PATH");
    directories = get_path_directories(path);

    while (1)
    {
        printf("$ ");

        if (fgets(command, BUFFER_SIZE, stdin) == NULL)
        {
            if (feof(stdin))
            {
                printf("\n");
                break;
            }
            else
            {
                perror("fgets");
                break;
            }
        }
        command[strcspn(command, "\n")] = '\0';

        char *token = strtok(command, DELIM);
        i = 0;
        while (token != NULL)
        {
            args[i++] = token;
            token = strtok(NULL, DELIM);
        }
        args[i] = NULL;

        /* Check if command exists in each directory */
        for (int j = 0; directories[j] != NULL; j++)
        {
            char *cmd_path = malloc(strlen(directories[j]) + strlen(args[0]) + 2);
            if (cmd_path == NULL)
            {
                perror("malloc");
                exit(EXIT_FAILURE);
            }
            sprintf(cmd_path, "%s/%s", directories[j], args[0]);
            if (access(cmd_path, F_OK) != -1)
            {
                pid_t pid = fork();
                if (pid == -1)
                {
                    perror("fork");
                    exit(EXIT_FAILURE);
                }
                else if (pid == 0)
                {
                    execve(cmd_path, args, NULL);
                    perror("execve");
                    exit(EXIT_FAILURE);
                }
                else
                {
                    int status;
                    waitpid(pid, &status, 0);
                    free(cmd_path);
                    break;
                }
            }
            free(cmd_path);
        }
    }

    /* Free allocated memory */
    free(directories);

    return (0);
}
