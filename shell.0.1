#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(void)
{
    char *line = NULL;
    size_t len = 0;

    while (1) {
        printf("$ ");
        getline(&line, &len, stdin);

        /* Remove newline character */
        line[strcspn(line, "\n")] = 0;

        /* Fork and execute the command */
        pid_t pid = fork();
        if (pid == 0) {
            /* Child process */
            execlp(line, line, NULL);
            perror("Execution failed");
            exit(EXIT_FAILURE);
        } else if (pid < 0) {
            perror("Fork failed");
        } else {
            /* Parent process */
            wait(NULL);
        }
    }

    free(line);
    return 0;
}
void execute_command(char *command) {
    pid_t pid, wpid;
    int status;

    pid = fork();

    if (pid == 0) {
        /* Child process */
        char *args[MAX_ARGS];
        int i = 0;

        /* Tokenize the command */
        char *token = strtok(command, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        /* Execute the command */
        execvp(args[0], args);

        /* If execvp fails */
        perror("Error");
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        perror("Fork failed");
    } else {
        // Parent process
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
}
